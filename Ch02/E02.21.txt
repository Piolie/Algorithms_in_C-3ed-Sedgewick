/* ---------------------------------------------------------------------
                              EXERCISE 2.21
------------------------------------------------------------------------
Prove that we can make any of the following transformations in an
expression that uses the O-notation:
1)                     f(N) -> O(f(N)),
2)                 cO(f(N)) -> O(f(N)),
3)                 O(cf(N)) -> O(f(N)),
4)    f(N) - g(N) = O(h(N)) -> f(N) = g(N) + O(h(N)),
5)           O(f(N))O(g(N)) -> O(f(N)g(N)),
6)        O(f(N)) + O(g(N)) -> O(g(N)) if f(N) = O(g(N)).
--------------------------------------------------------------------- */

I don't think the book gives enough information to solve this exercise
rigourosly. Let's do what we can.

See Big_O_notation.md for some useful notes.

1)
This one is trivial. If we choose c_0 > 1, for example, c_0 = 2, then,
for any N_0 > 0:
    f(N) < c_0 f(N), for all N > N_0
Which means that f(N) is O(f(N)).


2)
Suppose g(n) is cO(f(N)), then g(n)/c is O(f(N)):
    g(N)/c < c_0 f(N), for all N > N_0
then
    g(N) < c * c_0 f(N)
    g(N) < (c_0 * c) f(N)
which means that g(N) is O(f(N)).


3)
Suppose g(N) is O(cf(N)):
    g(N) < c_0 * c f(N), for all N > N0
    g(N) < (c_0 * c) f(N)
which means that g(N) is O(f(N)).


4)
If f(N) - g(N) is O(h(N)), then:
    f(N) - g(N) < c_0 h(N), for all N > N_0
then:
    f(N) < g(N) + c_0 h(N)
which means f(N) is g(N) + O(h(N)).


5)
Suppose l(N) is O(f(N)) and m(N) is O(g(N)), then:
    l(N) < c_1 f(N), for N > N_1
and
    m(N) < c_2 g(N), for N > N_2
Let's choose
    N_0 = max(N_1, N_2)
This way, both inequalities are satisfied for N > N_0. This means:
    l(N) * m(N) < c_1 f(N) * c_2 g(N), for N > N_0
Defining c_0 = c_1 * c_2:
    l(N) * m(N) < c_0 * f(N) * g(N), for N > N_0
which means l(N) * m(N) is O(f(N)*g(N))


6)
Suppose l(N) is O(f(N)) and m(N) is O(g(N)), then:
    l(N) < c_1 f(N), for N > N_1
and
    m(N) < c_2 g(N), for N > N_2
Let's choose
    N_3 = max(N_1, N_2)
then:
    l(N) + m(N) < c_1 f(N) + c_2 g(N), for N > N_3
If f(N) is O(g(N)), then, there exists N_4, such that:
    f(N) < c_2 g(N), for N > N_4
choosing N_0 = max(N_3, N_4), we can substitute the last inequality in
the previous one: (for N > N_0)
    l(N) + m(N) < c_2 g(N) + c_2 g(N) = 2c_2 g(N)
which means that l(N) + m(N) is O(g(N)).

Note: if f(N) is not necessarily O(g(N)), then the following, more
general formula applies:
    O(f(N)) + O(g(N)) = O(|f(N)| + |g(N)|)
