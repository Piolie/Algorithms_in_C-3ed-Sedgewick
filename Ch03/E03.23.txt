/* ---------------------------------------------------------------------
                             EXERCISE 3.23
------------------------------------------------------------------------
Modify Program 3.8 to perform the same computation in d dimensions.
--------------------------------------------------------------------- */

The statement doesn't say where d should come from or how the given
data types should be modified to accommodate d dimensions. If we
consider d to be user provided, then making it work is not trivial,
because the distance function would have to accept point arguments with
a variable number of dimensions. This could be done, but the typedef for
point would have to be changed to something like this:

typedef struct {
    int dimensions;
    float *coord;
} point;

and we would have to malloc (and free) enough space for the coordinates
of each point. Parsing the input from argv[] would also take some work.

Then, the distance function could be like this:

float distance(point a, point b, int dimensions)
{
    float dx2 = 0;
    for (int i = 0; i < dimensions; i++)
    {
        float diff = a.coord[i] - b.coord[i];
        dx2 += diff*diff;
    }

    return sqrt(dx2);
}

If d is hard-coded, so that point has coordinates c1, c2, ..., cd, then
we simply do:

    float d1 = a.c1 - b.c1;
    float d2 = a.c2 - b.c2;
            ...
    float dd = a.cd - b.cd;

and

    return sqrt(d1*d1 + d2*d2 + ... + dd*dd);
