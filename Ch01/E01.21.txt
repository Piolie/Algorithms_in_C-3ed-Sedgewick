/* ---------------------------------------------------------------------
                              EXERCISE 1.21
------------------------------------------------------------------------
Show that Property 1.3 holds for the algorithm described in
Exercise 1.20.
--------------------------------------------------------------------- */

Property 1.3: The weighted quick-union algorithm follows at most lg N
pointers to determine whether two of N objects are connected.

We can prove that the union operation preserves the property that the
number of pointers followed from any node to the root in a set of k
objects is no greater than lg k. When we combine a set of i nodes with a
set of j nodes with i <= j, we increase the number of pointers that must
be followed in the smaller set by 1, but they are now in a set of size
i + j, so the property is preserved because
1 + lg i = lg(i + i) <= lg(i+j). ■

We want to combine two trees Ti and Tj, of heights i and j and Ni and Nj
elements each, respectively. Let's suppose that for each tree, it
is true that P(Ti) <= lg Ni and P(Tj) <= lg Nj, where P(Ti) and P(Tj)
are the maximum number of pointers from any node of each tree to its
root.

Observation: since the height of a tree is, by definition, the maximum
             depth among its nodes, P(Ti) = i and P(Tj) = j.

If i < j the resulting tree will have height j. Thus:
    P(Ti+Tj) = j = P(Tj)
But we know that P(Tj) <= lg Nj, and that lg Nj <= lg (Ni + Nj) = lg N:
    P(Ti+Tj) <= lg N

If i = j the resulting tree will have height 1 + j. Thus:
    P(Ti+Tj) = 1 + j = 1 + P(Tj)
But we know that P(Tj) <= lg Nj, so:
    P(Ti+Tj) <= 1 + lg Nj = lg (Nj + Nj) = lg N

So in both cases the property is preserved. ■
